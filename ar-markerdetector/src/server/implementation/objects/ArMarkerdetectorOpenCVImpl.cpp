/* Autogenerated with kurento-module-creator */
#include "ArMarkerdetectorOpenCVImpl.hpp"
#include <KurentoException.hpp>
#include "ArMarkerPose.hpp"

#define SHOWRESO 0
#define TWISTRESO 0

namespace kurento
{
namespace module
{
namespace armarkerdetector
{

ArMarkerdetectorOpenCVImpl::ArMarkerdetectorOpenCVImpl ()
{
}

/*
 * This function will be called with each new frame. mat variable
 * contains the current frame. You should insert your image processing code
 * here. Any changes in mat, will be sent through the Media Pipeline.
 */
void ArMarkerdetectorOpenCVImpl::process (cv::Mat &orgMat)
{
  unsigned long timeStamp = 0;
  ar.getTimeStamp(&timeStamp);
  //std::cout << std::endl <<"***SMART KMS (WITHOUT ARFILTER)\t" << ar.getElapsedTime()<< std::endl;

  SMART_TIMESTAMP("KMS (WITHOUT ARFILTER)", ar.getElapsedTime());

  //std::cout << std::endl <<"***SMART TIME\t" << timeStamp << std::endl;
  ar.start();

#if SHOWRESO
  std::cout << std::endl <<"PROCESS...:"
	    << " cols:" << orgMat.cols
	    << " rows:" << orgMat.rows 
	    << std::endl<<std::flush;
#endif

  int width = orgMat.cols;
  int height = orgMat.rows;
  bool twisted = false;
  cv::Mat mat;

#if TWISTRESO
  //if(width != 320 || height != 240){
  //  cv::resize(orgMat, mat, cv::Size(320, 240));
  if(width != 640 || height != 480){
    cv::resize(orgMat, mat, cv::Size(640, 480));
    twisted = true;
#if SHOWRESO
    std::cout<<"IMG RESIZED o_O"	      
	     << " cols:" << mat.cols
	     << " rows:" << mat.rows 
	     << std::endl<<std::flush;
#endif
  }
#endif


  try{
  ar.resetFilterTime();
  ar.proactivate(twisted ? mat : orgMat);
  //std::cout << std::endl <<"***SMART PROACTIVE\t" << ar.getFilterTime()<< std::endl;

  //SMART_TIMESTAMP("PROACTIVE", ar.getFilterTime());

  ar.resetFilterTime();
  ar.detect(twisted ? mat : orgMat);
  //std::cout << std::endl <<"***SMART ALLDETECTED\t" << ar.getFilterTime()<< std::endl;
  SMART_TIMESTAMP("ALLDETECTED", ar.getFilterTime());

#if 0
#if SHOWRESO
  std::cout<<"DETECTED:" << ar.detectedMarkerData.size()   
	   << std::endl<<std::flush;
#endif
#endif

  ar.resetFilterTime();
  ar.augment(twisted ? mat : orgMat);  
  //std::cout << std::endl <<"***SMART ALL AUGMENTED\t" << ar.getFilterTime()<< std::endl;
  SMART_TIMESTAMP("ALL AUGMENTED", ar.getFilterTime());

  ar.resetFilterTime();
  ar.generateEvents(getSharedFromThis(), signalMarkerPose, signalMarkerCount, twisted ? mat : orgMat);
  //std::cout << std::endl <<"***SMART ALL EVENTS\t" << ar.getFilterTime()<< std::endl;

  }
catch (const std::exception& ex) {
  std::cout << std::endl <<"BIZARRE EXP :" << ex.what()
	    << std::endl<<std::flush;    
} catch (const std::string& ex) {
    std::cout << std::endl <<"BIZARRE EXPSTR :" << ex
	    << std::endl<<std::flush;    
} 
  catch(...){
  std::cout << std::endl <<"BIZARRE ALL:"
	    << std::endl<<std::flush;    
  }

  //ar.detectedMarkerData.clear();
  //std::cout << std::endl <<"EVENTS:"
//	    << " cols:" << signalMarkerPose.size()
//	    << " rows:" << signalMarkerCount.size()
//	    << std::endl<<std::flush;

#if TWISTRESO
    //if(width != 320 || height != 240){
    //  cv::resize(mat, orgMat, cv::Size(width, height));
    if(width != 640 || height != 480){
      cv::resize(mat, orgMat, cv::Size(width, height));
#if 0
      std::cout<<"IMG REVERTED o_O "  
	       << " cols:" << mat.cols
	       << " rows:" << mat.rows 
	       << std::endl<<std::flush;

      if(ar.sequenceNum % 25 == 0){
	std::string str = "/tmp/nubox_" + std::to_string (ar.sequenceNum) + ".png";
	std::cout<<"timeout for" << str << std::endl;
	ar.writeImage(str.c_str(), orgMat);
      }
#endif
    }
#endif
    //std::cout << std::endl <<"***SMART ARFILTER (ONLY)\t"<< ar.getElapsedTime()<< std::endl;
  SMART_TIMESTAMP("ARFILTER (ONLY)", ar.getElapsedTime());
  ar.start();
}
  
  void ArMarkerdetectorOpenCVImpl::setPose (int id, int type, float value){
    ar.setPose (id, type, value);
  }

  void ArMarkerdetectorOpenCVImpl::enableAugmentation (bool enable)
  {
    ar.enableAugmentation(enable);
  }
  
  void ArMarkerdetectorOpenCVImpl::enableMarkerCountEvents (bool enable)
  {
    ar.enableMarkerCountEvents(enable);
  }

  void ArMarkerdetectorOpenCVImpl::enableAugmentationSet (const std::vector<int> &enableAugmentation)
  {
    ar.enableAugmentationSet(enableAugmentation);
  }
  
  void ArMarkerdetectorOpenCVImpl::disableAugmentationSet (const std::vector<int> &disableAugmentation)
  {
    ar.disableAugmentationSet(disableAugmentation);
  }
  
void ArMarkerdetectorOpenCVImpl::setArThing (const std::vector<std::shared_ptr<ArThing>> &setArThing)
{
  ar.setArThing(setArThing);
}

  void ArMarkerdetectorOpenCVImpl::setMarkerPoseFrequency (bool enable, float frequency){
    ar.setMarkerPoseFrequency(enable, frequency);
  }

  void ArMarkerdetectorOpenCVImpl::setMarkerPoseFrameFrequency (bool enable, int frequency){
    ar.setMarkerPoseFrameFrequency(enable, frequency);
  }


void ArMarkerdetectorOpenCVImpl::setShowDebugLevel (int showDebugLevel)
{
  ar.setShowDebugLevel(showDebugLevel);
}

} /* armarkerdetector */
} /* module */
} /* kurento */
