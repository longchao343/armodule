/**
Licensing and distribution

ArModule is licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

ALVAR 2.0.0 - A Library for Virtual and Augmented Reality Copyright 2007-2012 VTT Technical Research Centre of Finland Licensed under the GNU Lesser General Public License

Irrlicht Engine, the zlib and libpng. The Irrlicht Engine is based in part on the work of the Independent JPEG Group The module utilizes IJG code when the Irrlicht engine is compiled with support for JPEG images.
*/

/** @author Markus Ylikerälä */

/* Autogenerated with kurento-module-creator */

#ifndef __AR_MARKERDETECTOR_OPENCV_IMPL_HPP__
#define __AR_MARKERDETECTOR_OPENCV_IMPL_HPP__

#include <OpenCVProcess.hpp>
#include "ArMarkerdetector.hpp"
#include <EventHandler.hpp>
#include "Process.h"

namespace kurento
{
namespace module
{
namespace armarkerdetector
{

class ArMarkerdetectorOpenCVImpl : public virtual OpenCVProcess
{
protected:
  ArProcess ar;

  // TODO: Following is a kludge to get correct shared_from_this()
  //       from the ArMarkerdetectorImpl class inherited from this.
  virtual std::shared_ptr<MediaObject> getSharedFromThis()=0;

public:

  ArMarkerdetectorOpenCVImpl ();

  virtual ~ArMarkerdetectorOpenCVImpl () {};

  virtual void process (cv::Mat &mat);

  void enableAugmentation (bool enable);
  void enableMarkerCountEvents (bool enable);
  void enableTickEvents (bool enable);
  void setArThing (const std::vector<std::shared_ptr<ArThing>> &arThing);
  void setMarkerPoseFrequency (bool enable, float frequency);
  void setMarkerPoseFrameFrequency (bool enable, int frequency);
  void setPose (int id, int type, float value);
  sigc::signal<void, MarkerCount> signalMarkerCount;
  sigc::signal<void, MarkerPose> signalMarkerPose;
  sigc::signal<void, Tick> signalTick;

};

} /* armarkerdetector */
} /* module */
} /* kurento */

#endif /*  __AR_MARKERDETECTOR_OPENCV_IMPL_HPP__ */
