{
  "remoteClasses": [
    {
      "name": "ArMarkerdetector",
      "extends": "OpenCVFilter",
      "doc": "ArMarkerdetector interface. Documentation about the module",
      "constructor": {
	"doc": "Create an element",
	"params": [
	  {
	    "name": "mediaPipeline",
	    "doc": "the parent :rom:cls:`MediaPipeline`",
	    "type": "MediaPipeline",
	    "final": true
	  }
	]
      },
      "methods": [
{
          "name": "setPose",
          "doc": "Not used/implemented yet and may be removed",
          "params": [
            {
              "name": "id",
              "doc": "",
              "type": "int"
            },
            {
              "name": "type",
              "doc": "",
              "type": "int"
            },
            {
              "name": "value",
              "doc": "",
              "type": "float"
            }
          ]
        },
{
          "name": "enableAugmentation",
          "doc": "Sets the enabled state of the 2D and 3D rendering",
          "params": [
            {
              "name": "enable",
              "doc": "state to enable or disable augmentation",
              "type": "boolean"
            }
          ]
        },
{
          "name": "enableMarkerCountEvents",
          "doc": "Sets the enabled state for notifying the listener when the number of markers changes",
          "params": [
            {
              "name": "enable",
              "doc": "state to enable of disable generation of MarkerCountvents",
              "type": "boolean"
            }
          ]
        },
{
          "name": "enableAugmentationSet",
          "doc": "Not used/implemented yet and may be removed",
          "params": [
            {
              "name": "arset",
              "doc": "enableAugmentation",
              "type": "int[]"
            }
          ]
        },
{
          "name": "disableAugmentationSet",
          "doc": "Not used/implemented yet and may be removed",
          "params": [
            {
              "name": "arset",
              "doc": "disableAugmentation",
              "type": "int[]"
            }
          ]
        },
{
          "name": "setArThing",
          "doc": "Passes set of augmentables ie info about markers/planars that should be tracked and 2D/3D models to be rendered. See description of ArThing for more details",
          "params": [
            {
              "name": "arThing",
              "doc": "set of ArThings",
              "type": "ArThing[]"
            }
          ]
        },
{
          "name": "setMarkerPoseFrequency",
          "doc": "Sets the enabled state for marker events and how often these events should be generated based on time",
          "params": [
            {
              "name": "enable",
              "doc": "state to enable or disable MarkerPoseEvents based on time",
              "type": "boolean"
            },
            {
              "name": "frequency",
              "doc": "generate with Hz",
              "type": "float"
            }
          ]
        },
{
          "name": "setMarkerPoseFrameFrequency",
          "doc": "Sets the enabled state for marker events and how often these events should be generated based on number of frames",
          "params": [
            {
              "name": "enable",
              "doc": "state to enable or disable MarkerPoseEvents based on frames",
              "type": "boolean"
            },
            {
              "name": "frequency",
              "doc": "generate for every nth frame, n e [1, ...)",
              "type": "int"
            }
          ]
        },
        {
          "name": "setShowDebugLevel",
          "doc": "Not used/implemented yet and may be removed",
          "params": [
            {
              "name": "showDebugLevel",
              "doc": "show debug info on image",
              "type": "int"
            }
          ]
        }
      ],
      "events": [
        "MarkerCount", "MarkerPose"

      ]
    }
  ],


"complexTypes":[
{
    "name": "ArKvpString",
    "doc": "AR Key-Value-Pair",
    "typeFormat": "REGISTER",
    "properties": [
        {
            "name": "key",
            "doc": "unique key for a value",
            "type": "String"
        },
        {
            "name": "value",
            "doc": "arbitrary value",
            "type": "String"
        }
    ]
},
{
    "name": "ArKvpInteger",
    "doc": "AR Key-Value-Pair",
    "typeFormat": "REGISTER",
    "properties": [
        {
            "name": "key",
            "doc": "unique key for a value",
            "type": "String"
        },
        {
            "name": "value",
            "doc": "arbitrary value",
            "type": "int"
        }
    ]
},
{
    "name": "ArKvpFloat",
    "doc": "AR Key-Value-Pair",
    "typeFormat": "REGISTER",
    "properties": [
        {
            "name": "key",
            "doc": "unique key for a value",
            "type": "String"
        },
        {
            "name": "value",
            "doc": "arbitrary value",
            "type": "float"
        }
    ]
},
{
    "name": "ArMarkerPose",
    "doc": "Pose of tracked marker expressed as 4x4 matrix",
    "typeFormat": "REGISTER",
    "properties": [
        {
            "name": "markerId",
            "doc": "marker id",
            "type": "int"
        },
        {
            "name": "matrixModelview",
            "doc": "marker modelview matrix",
            "type": "float[]"
        }
    ]
},
{
      "name": "OverlayType",
      "doc": "Describes which kind of model should be rendered ie 2D or 3D",
      "typeFormat": "ENUM",
      "values": [
        "TYPE2D",
        "TYPE3D"
      ]
    },
{
      "name": "ArThing",
      "doc": "Container for passing data about the augmentable ie the target (marker or planar) to be tracked and model (2D or 3D) to be rendered",
    "typeFormat": "REGISTER",
       "properties": [
        {
          "name": "markerId",
          "doc": "marker id",
          "type": "int"
        },
	   {
              "name": "overlayType",
              "doc": "2D or 3D",
              "type": "OverlayType"
            },

	{
          "name": "strings",
          "doc": "all the sting values relating to the augmentable eg model url. See DevelopersGuide for more details.",
          "type": "ArKvpString[]"
	},
          {
              "name": "integers",
              "doc": "all the integer values relating to the augmentable",
              "type": "ArKvpInteger[]"
            },
            {
              "name": "floats",
              "doc": "all the float values relating to the augmentable",
              "type": "ArKvpFloat[]"
            }
      ]
}
],
  "events": [
    {
      "name": "MarkerCount",
      "extends": "Media",
      "doc": "An event that is sent when the number of visible markers is changed. Tracking coordinates for the markers is going to be sent with some other approach.",
      "properties": [
        {
          "name": "sequenceNumber",
          "doc": "sequence number",
          "type": "int"
        },
        {
          "name": "countTimestamp",
          "doc": "timestamp",
          "type": "int"
        },
        {
          "name": "markerId",
          "doc": "marker id",
          "type": "int"
        },
        {
          "name": "markerCount",
          "doc": "Number of visible markers with the specified id",
          "type": "int"
        },
        {
          "name": "markerCountDiff",
          "doc": "How much the markerCount was changed from the previous situation",
          "type": "int"
        }
      ]
    },
 {
      "name": "MarkerPose",
      "extends": "Media",
      "doc": "Matrices for marker pose",
      "properties": [
        {
          "name": "sequenceNumber",
          "doc": "sequence number",
          "type": "int"
        },
        {
          "name": "poseTimestamp",
          "doc": "timestamp",
          "type": "int"
        },
        {
          "name": "width",
          "doc": "resolution width",
          "type": "int"
        },
        {
          "name": "height",
          "doc": "resolution height",
          "type": "int"
        },
        {
          "name": "matrixProjection",
          "doc": "marker projection matrix",
          "type": "float[]"
        },
        {
          "name": "markerPose",
          "doc": "marker pose",
          "type": "ArMarkerPose[]"
        }       
      ]
    }
  ]
}
